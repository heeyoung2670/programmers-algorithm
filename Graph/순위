#include <string>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;

int solution(int n, vector<vector<int>> results) {
	int answer = 0;

	int map[101][101] = { 0, };
	for (int i = 0; i < results.size(); i++) {
		map[results[i][0]][results[i][1]] = 1;
		map[results[i][1]][results[i][0]] = -1;
	}

	for (int i = 1; i <= n; i++) {

		//초기화
		queue<int> q;
		bool visited[101] = { false, };

		//1인 경로 탐색
		q.push(i);
		visited[i] = true;
		while (!q.empty()) {
			int x = q.front();
			q.pop();
			for (int j = 1; j <= n; j++) {
				if (map[x][j] == 1 && !visited[j]) {
					visited[j] = true;
					q.push(j);
				}
			}
		}

		//-1인 경로 탐색
		q.push(i);
		while (!q.empty()) {
			int x = q.front();
			q.pop();
			for (int j = 1; j <= n; j++) {
				if (map[x][j] == -1 && !visited[j]) {
					visited[j] = true;
					q.push(j);
				}
			}
		}

		//모두 방문할 수 있는지 체크
		bool check = true;
		for (int k = 1; k <= n; k++) {
			if (!visited[k]) {
				check = false;
				break;
			}
		}
		if (check) answer++;
	}

	return answer;
}
--------------------------------------------------------------------------------
//플로이드 와샬 풀이 - 앞의 풀이에 비해 시간 훨씬 덜 소요
#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(int n, vector<vector<int>> results) {
	int answer = 0;

	bool map[101][101] = { false, };
	for (int i = 0; i < results.size(); i++) {
		map[results[i][0]][results[i][1]] = true;
	}
    
    for(int k = 1; k <= n; k++){
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                if(map[i][k] && map[k][j]){
                    map[i][j] = true; //i가 k를 이기고, k가 j를 이겼다면 i도 j를 이김
                }
            }
        }
    }

	for (int i = 1; i <= n; i++) {
        int cnt = 0;
		for (int j = 1; j <= n; j++) {
			if(map[i][j] || map[j][i]) cnt++;
		}
		if (cnt == n-1) answer++;
	}

	return answer;
}
