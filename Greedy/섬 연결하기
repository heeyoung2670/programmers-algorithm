#include <string>
#include <vector>
#include <queue>

using namespace std;

struct Data {
	int node1, node2, cost;
	Data() {};
	Data(int node1, int node2, int cost) :node1(node1), node2(node2), cost(cost) {};

	bool operator<(const Data d) const {
		return cost > d.cost;
	}
};

int parent[101];

int find(int x) {
	if (parent[x] == x) return x;
	return parent[x] = find(parent[x]);
}

void uni(int x, int y) {
	parent[find(x)] = find(y);
}

int solution(int n, vector<vector<int>> costs) {
	int answer = 0;

	priority_queue<Data> pq;

	//부모노드를 자기 자신으로 초기화 -> union-find 알고리즘
	for (int i = 0; i <= n; i++) {
		parent[i] = i;
	}

	for (int i = 0; i < costs.size(); i++) {
		pq.push(Data(costs[i][0], costs[i][1], costs[i][2]));
	}

	int cnt = 0;
	while (true)
	{
		if (cnt == n - 1) break;
		Data d = pq.top();
		pq.pop();
		if (find(d.node1) != find(d.node2)) { //순환확인
			uni(d.node1, d.node2);
			answer += d.cost;
			cnt++;
		}
	}

	return answer;
}
